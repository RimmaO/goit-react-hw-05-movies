{"version":3,"file":"static/js/597.16adacbd.chunk.js","mappings":"yNAwCA,UApCa,WACX,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,8GAEOC,EAAAA,EAAAA,IAAQJ,GAFf,OAENK,EAFM,OAGZN,EAAUM,GAHE,gDAKZC,QAAQC,IAAR,MALY,yDAAH,qDAQbJ,GACD,GAAE,CAACH,KAGF,8BACE,wBACGF,EAAOU,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,GAAlC,OACV,2BACE,gBACEC,IAAKJ,EArBI,kCAqB0BA,EApBvB,2CAqBZK,IAAI,UAEN,uBAAIJ,KACJ,uCAAeC,OANRC,EADC,OAanB,C,+LCpCDG,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAGHC,EAAS,mCAAG,oGACAF,EAAAA,EAAAA,IAAA,qCAAwCC,IADxC,cACjBE,EADiB,yBAEhBA,EAASb,KAAKc,SAFE,2CAAH,qDAMTC,EAAQ,mCAAG,WAAMC,GAAN,uFACCN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBK,IAFrB,cAChBH,EADgB,yBAIfA,EAASb,KAAKc,SAJC,2CAAH,sDAQRG,EAAU,mCAAG,WAAMtB,GAAN,uFACDe,EAAAA,EAAAA,IAAA,gBAAmBf,EAAnB,oBAAsCgB,IADrC,cAClBE,EADkB,yBAEjBA,EAASb,MAFQ,2CAAH,sDAMVD,EAAO,mCAAG,WAAMJ,GAAN,uFACEe,EAAAA,EAAAA,IAAA,gBACZf,EADY,4BACegB,IAFjB,cACfE,EADe,yBAIdA,EAASb,KAAKkB,MAJA,2CAAH,sDAQPC,EAAU,mCAAG,WAAMxB,GAAN,uFACDe,EAAAA,EAAAA,IAAA,gBACZf,EADY,4BACegB,IAFd,cAClBE,EADkB,yBAIjBA,EAASb,KAAKc,SAJG,2CAAH,qD","sources":["components/Cast.jsx","components/Services/API.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from './Services/API';\n\nconst Cast = () => {\n  const [movies, setMovies] = useState([]);\n  const { movieId } = useParams();\n  const BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500';\n  const DEFAULT_URL_IMG = 'https://placehold.co/600x400?font=roboto';\n\n  useEffect(() => {\n    const addCast = async () => {\n      try {\n        const data = await getCast(movieId);\n        setMovies(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    addCast();\n  }, [movieId]);\n\n  return (\n    <section>\n      <ul>\n        {movies.map(({ profile_path, name, character, id }) => (\n          <li key={id}>\n            <img\n              src={profile_path ? BASE_URL_IMG + profile_path : DEFAULT_URL_IMG}\n              alt=\"cast\"\n            />\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'ca1e14ffb473d6a82f337d8c688837e0';\n\n// список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nexport const getMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// пошук фільму за ключовим словом на сторінці фільмів.\nexport const getQuery = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data.results;\n};\n\n// запит повної інформації про фільм для сторінки кінофільму.\nexport const getDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n};\n\n// запит інформації про акторський склад для сторінки кінофільму.\nexport const getCast = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\n// запит оглядів для сторінки кінофільму\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n"],"names":["useState","movies","setMovies","movieId","useParams","useEffect","addCast","getCast","data","console","log","map","profile_path","name","character","id","src","alt","axios","API_KEY","getMovies","response","results","getQuery","query","getDetails","cast","getReviews"],"sourceRoot":""}